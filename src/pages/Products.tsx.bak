import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Link } from 'react-router-dom';
import { 
  Clock,
  CheckCircle2,
  ArrowRight,
  Wrench,
  Wallet
} from 'lucide-react';

import { Button } from '../components/Button';
import { supabase } from '../lib/supabaseClient';
import { SiteVisitForm } from '../components/SiteVisitForm';

interface ProductVariant {
  id: string;
  product_id: string;
  capacity_kw: number;
  price: number;
  subsidy_percentage: number;
  area_required: number;
  monthly_savings: number;
  installation_days: string;
  is_default: boolean;
  image_url?: string;
}

interface ProductCategory {
  id: string;
  name: string;
  icon_name: string;
  description?: string;
  created_at?: string;
  updated_at?: string;
}

interface Product {
  id: string;
  name: string;
  capacity_kw: number;
  generation: string;
  area_required: number;
  monthly_savings: number;
  subsidy_amount: number;
  price: number;
  panel_type: string;
  image_url: string;
  features: string[];
  description: string;
  category_id: string;
  sku: string;
  original_price?: number;
  installation_time?: string;
  specifications?: Record<string, any>;
  inventory_count?: number;
  product_categories?: ProductCategory;
  product_variants?: ProductVariant[];
}

export default function Products() {
  const [isSiteVisitModalOpen, setIsSiteVisitModalOpen] = useState(false);
  const [siteVisitProduct, setSiteVisitProduct] = useState<{sku: string, name: string, power: number} | null>(null);
  const [products, setProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // Function to transform image URL to a valid external URL
  const getValidImageUrl = (imageUrl: string | null | undefined, productName: string): string => {
    // If no image, use placeholder
    if (!imageUrl) {
      return `https://via.placeholder.com/800x600/0A0A0A/4BFB35?text=${encodeURIComponent(productName || 'Product')}`;
    }
    
    // Check if URL is already absolute
    if (imageUrl.startsWith('http://') || imageUrl.startsWith('https://')) {
      return imageUrl;
    } else {
      // For demo purposes, use an external image service instead of relative paths
      const productType = productName.toLowerCase().includes('panel') ? 'panel' : 
                        productName.toLowerCase().includes('battery') ? 'battery' : 
                        productName.toLowerCase().includes('inverter') ? 'inverter' : 
                        productName.toLowerCase().includes('rock') ? 'rock-light' : 
                        'solar';
      
      return `https://source.unsplash.com/800x600/?solar,${productType}`;
    }
  };

  useEffect(() => {
    async function fetchProducts() {
      try {
        setLoading(true);
        
        const { data, error } = await supabase
          .from('product_skus')
          .select(`
            *,
            product_categories(*),
            product_variants(*)
          `)
          .order('capacity_kw', { ascending: true });
        
        if (error) throw error;
        
        // Log the raw data to debug image issues
        console.log('Raw product data:', data);
        
        const transformedProducts = data.map((product: any) => {
          // Process features and specifications
          const processedProduct = {
            ...product,
            features: Array.isArray(product.features) 
              ? product.features 
              : (typeof product.features === 'string' 
                  ? JSON.parse(product.features) 
                  : product.features || []),
            specifications: typeof product.specifications === 'string' 
              ? JSON.parse(product.specifications) 
              : product.specifications || {}
          };
          
          // Log the image URLs for debugging
          console.log(`Product ${product.name} image URL:`, product.image_url);
          
          if (product.product_variants && product.product_variants.length > 0) {
            const defaultVariant = product.product_variants.find((v: ProductVariant) => v.is_default);
            if (defaultVariant) {
              console.log(`Default variant for ${product.name} image URL:`, defaultVariant.image_url);
            }
          }
          
          return processedProduct;
        });
        
        setProducts(transformedProducts);
        setError(null);
      } catch (err: any) {
        console.error('Error fetching products:', err);
        setError(err.message || 'Error fetching products');
      } finally {
        setLoading(false);
      }
    }
    
    fetchProducts();
  }, []);
  
  // No filtering or sorting - display all products
  const displayedProducts = products;

  // handleProductSelect function removed - now using direct Link navigation to ProductDetail page

  const handleBookClick = (product: Product) => {
    setSiteVisitProduct({
      sku: product.sku,
      name: product.name,
      power: product.capacity_kw
    });
    setIsSiteVisitModalOpen(true);
  };

  const handleCloseSiteVisit = () => {
    setIsSiteVisitModalOpen(false);
    setSiteVisitProduct(null);
  };

  return (
    <div className="min-h-screen bg-[#0A0A0A]">
      
      {/* Header spacer - fixed height to compensate for the navbar */}
      <div className="h-20"></div>
      
      {/* Products Grid - Apple Style */}
      <section className="pt-10 pb-20">
        <div className="container mx-auto px-6 max-w-6xl">
          {/* Enhanced Section Heading with Illustration */}
          <motion.div 
            className="mb-8"
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6 }}
          >
            {/* Clean card with minimal styling inspired by Home page */}
            <div className="transition-all duration-300 border border-white/10 hover:border-primary/20 rounded-xl shadow-md p-6 md:p-8 relative z-10 w-full max-w-5xl mx-auto bg-dark-900/50 backdrop-blur-sm group hover:shadow-xl hover:shadow-primary/5">
              {/* Subtle background gradient */}
              <div className="absolute inset-0 bg-gradient-to-br from-primary/5 to-transparent opacity-10 group-hover:opacity-20 transition-opacity duration-500 rounded-xl"></div>
              
              {/* Content Section */}
              <div className="space-y-4 relative z-10 text-left">
                {/* Title and description */}
                <div className="space-y-2">
                  <h2 className="text-2xl md:text-3xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-primary to-primary/80">
                    {categories.find(cat => cat.id === selectedCategory)?.name || 'Products'}
                  </h2>
                  <p className="text-light/70">
                    {categories.find(cat => cat.id === selectedCategory)?.description || 
                      'Browse our collection of premium solar systems tailored for various needs.'}
                  </p>
                </div>
                
                {/* Key features as horizontal tags */}
                <div className="flex flex-wrap gap-2 mt-2">
                  {selectedCategory === 'on-grid' && (
                    <>
                      <span className="inline-flex items-center px-3 py-1 rounded-full text-sm bg-white/5 border border-white/10 text-light/80">
                        <CheckCircle2 className="h-3.5 w-3.5 text-primary mr-1.5" />
                        Grid-tied
                      </span>
                      <span className="inline-flex items-center px-3 py-1 rounded-full text-sm bg-white/5 border border-white/10 text-light/80">
                        <CheckCircle2 className="h-3.5 w-3.5 text-primary mr-1.5" />
                        No batteries
                      </span>
                      <span className="inline-flex items-center px-3 py-1 rounded-full text-sm bg-white/5 border border-white/10 text-light/80">
                        <CheckCircle2 className="h-3.5 w-3.5 text-primary mr-1.5" />
                        Net metering
                      </span>
                      <span className="inline-flex items-center px-3 py-1 rounded-full text-sm bg-primary/10 border border-primary/20 text-light">
                        <ArrowUpRight className="h-3.5 w-3.5 text-primary mr-1.5" />
                        40% subsidy
                      </span>
                    </>
                  )}
                  {selectedCategory === 'off-grid' && (
                    <>
                      <span className="inline-flex items-center px-3 py-1 rounded-full text-sm bg-white/5 border border-white/10 text-light/80">
                        <CheckCircle2 className="h-3.5 w-3.5 text-primary mr-1.5" />
                        Independent
                      </span>
                      <span className="inline-flex items-center px-3 py-1 rounded-full text-sm bg-white/5 border border-white/10 text-light/80">
                        <CheckCircle2 className="h-3.5 w-3.5 text-primary mr-1.5" />
                        Battery backup
                      </span>
                      <span className="inline-flex items-center px-3 py-1 rounded-full text-sm bg-white/5 border border-white/10 text-light/80">
                        <CheckCircle2 className="h-3.5 w-3.5 text-primary mr-1.5" />
                        Remote areas
                      </span>
                      <span className="inline-flex items-center px-3 py-1 rounded-full text-sm bg-primary/10 border border-primary/20 text-light">
                        <ArrowUpRight className="h-3.5 w-3.5 text-primary mr-1.5" />
                        25% subsidy
                      </span>
                    </>
                  )}
                  {selectedCategory === 'hybrid' && (
                    <>
                      <span className="inline-flex items-center px-3 py-1 rounded-full text-sm bg-white/5 border border-white/10 text-light/80">
                        <CheckCircle2 className="h-3.5 w-3.5 text-primary mr-1.5" />
                        Grid + Battery
                      </span>
                      <span className="inline-flex items-center px-3 py-1 rounded-full text-sm bg-white/5 border border-white/10 text-light/80">
                        <CheckCircle2 className="h-3.5 w-3.5 text-primary mr-1.5" />
                        Power backup
                      </span>
                      <span className="inline-flex items-center px-3 py-1 rounded-full text-sm bg-white/5 border border-white/10 text-light/80">
                        <CheckCircle2 className="h-3.5 w-3.5 text-primary mr-1.5" />
                        Smart control
                      </span>
                      <span className="inline-flex items-center px-3 py-1 rounded-full text-sm bg-primary/10 border border-primary/20 text-light">
                        <ArrowUpRight className="h-3.5 w-3.5 text-primary mr-1.5" />
                        30% subsidy
                      </span>
                    </>
                  )}
                  {/* Additional categories would follow the same pattern */}
                </div>
              </div>
            </div>
          </motion.div>
          
          {/* Apple-style Products Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 md:gap-10 mb-20 max-w-5xl mx-auto">
            {sortedProducts.map((product, index) => (
              <motion.div
                key={product.id}
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true }}
                transition={{ duration: 0.5, delay: index * 0.1 }}
                className="h-full"
              >
                <Link 
                  to={`/products/${product.id}`}
                  className="group h-full flex flex-col bg-dark-800/30 backdrop-blur-sm rounded-2xl overflow-hidden border border-white/5 hover:border-primary/20 transition-all duration-500 hover:shadow-xl hover:shadow-primary/5" 
                >
                  {/* Product Image - Larger, Apple-style */}
                  <div className="relative h-[150px] md:h-[300px] overflow-hidden">
                    <img
                      src={
                        // Use our helper function to get a valid image URL
                        getValidImageUrl(
                          (product.product_variants && product.product_variants.find((v: ProductVariant) => v.is_default)?.image_url) || product.image_url,
                          product.name
                        )
                      }
                      alt={product.name}
                      className="w-full h-full object-cover transition-transform duration-700 group-hover:scale-105"
                      onError={(e) => {
                        // Log the error and fallback to placeholder
                        console.error(`Image load error for product ${product.id}:`, 
                          (product.product_variants && product.product_variants.find((v: ProductVariant) => v.is_default)?.image_url) || product.image_url
                        );
                        (e.target as HTMLImageElement).src = `https://via.placeholder.com/800x600/0A0A0A/4BFB35?text=${encodeURIComponent(product.name || 'Product')}`;
                      }}
                    />
                    <div className="absolute inset-0 bg-gradient-to-b from-transparent to-dark/80"></div>
                    <div className="absolute top-4 right-4 bg-dark-900/70 backdrop-blur-sm rounded-full px-3 py-1 text-xs font-medium border border-white/10">
                      {product.capacity_kw} kW
                    </div>
                  </div>
                  
                  {/* Product Info - Clean, Minimal */}
                  <div className="p-6 flex flex-col flex-1 justify-between">
                    <div>
                      <h3 className="text-[1.15rem] font-bold mb-4 text-light group-hover:text-primary transition-colors duration-300">
                        {product.name}
                      </h3>

                      
                      {/* Key Specs - Apple Style Line Design */}
                      <div className="space-y-3 mb-6">
                        <div className="flex items-center gap-2">
                          <Sun size={16} className="text-primary/80" />
                          <div className="flex flex-1 justify-between">
                            <span className="text-light/80 text-sm">Annual Energy</span>
                            <span className="text-sm font-medium">{product.capacity_kw * 1400} kWh</span>
                          </div>
                        </div>
                        <div className="flex items-center gap-2">
                          <Wallet size={16} className="text-primary/80" />
                          <div className="flex flex-1 justify-between">
                            <span className="text-light/80 text-sm">Annual Savings</span>
                            <span className="text-sm font-medium">₹{product.monthly_savings * 12}</span>
                          </div>
                        </div>
                        <div className="flex items-center gap-2">
                          <Clock size={16} className="text-primary/80" />
                          <div className="flex flex-1 justify-between">
                            <span className="text-light/80 text-sm">Payback Period</span>
                            <span className="text-sm font-medium">{Math.round(product.price / (product.monthly_savings * 12))} years</span>
                          </div>
                        </div>
                        <div className="flex items-center gap-2">
                          <Wrench size={16} className="text-primary/80" />
                          <div className="flex flex-1 justify-between">
                            <span className="text-light/80 text-sm">Installation</span>
                            <span className="text-sm font-medium">{product.installation_time || '7-10'} days</span>
                          </div>
                        </div>
                        {product.price > 20000 && (
                          <div className="mt-4 flex items-center gap-2">
                            <Wallet size={16} className="text-primary/80" />
                            <div className="flex flex-1 justify-between">
                              <span className="text-light/80 text-sm">Easy EMI</span>
                              <span className="text-sm font-medium">
                                ₹{Math.round((product.price - (product.subsidy_amount || 0)) / 12).toLocaleString()}/month
                              </span>
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                    
                    <div className="mt-auto pt-4 flex items-center justify-between border-t border-white/5">
                      <div className="flex flex-col">
                        {product.product_variants && product.product_variants.length > 0 ? (
                          <>
                            <div className="flex items-baseline gap-1">
                              {/* Use default variant price if available */}
                              {product.product_variants.find(v => v.is_default)?.price ? (
                                <>
                                  <p className="text-base line-through text-light/40">
                                    ₹{product.product_variants.find(v => v.is_default)?.price.toLocaleString()}
                                  </p>
                                  <span className="text-xs font-medium text-primary">
                                    {product.product_variants.find(v => v.is_default)?.subsidy_percentage || 35}% off
                                  </span>
                                </>
                              ) : (
                                <>
                                  <p className="text-base line-through text-light/40">₹{product.price.toLocaleString()}</p>
                                  <span className="text-xs font-medium text-primary">
                                    {Math.round((product.subsidy_amount / product.price) * 100)}% off
                                  </span>
                                </>
                              )}
                            </div>
                            <p className="text-2xl font-medium text-light">
                              {product.product_variants.find(v => v.is_default)?.price ? (
                                <>
                                  ₹{(product.product_variants.find(v => v.is_default)!.price * 
                                     (1 - product.product_variants.find(v => v.is_default)!.subsidy_percentage / 100)).toLocaleString()}
                                </>
                              ) : (
                                <>₹{(product.price - (product.subsidy_amount || 0)).toLocaleString()}</>
                              )}
                            </p>
                            {product.product_variants.length > 1 && (
                              <span className="text-xs text-primary mt-1">{product.product_variants.length} variants available</span>
                            )}
                          </>
                        ) : (
                          <>
                            <div className="flex items-baseline gap-1">
                              <p className="text-base line-through text-light/40">₹{product.price.toLocaleString()}</p>
                              <span className="text-xs font-medium text-primary">
                                {Math.round((product.subsidy_amount / product.price) * 100)}% off
                              </span>
                            </div>
                            <p className="text-2xl font-medium text-light">
                              ₹{(product.price - (product.subsidy_amount || 0)).toLocaleString()}
                            </p>
                          </>
                        )}
                      </div>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <Wallet size={16} className="text-primary/80" />
                  <div className="flex flex-1 justify-between">
                    <span className="text-light/80 text-sm">Annual Savings</span>
                    <span className="text-sm font-medium">₹{product.monthly_savings * 12}</span>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <Clock size={16} className="text-primary/80" />
                  <div className="flex flex-1 justify-between">
                    <span className="text-light/80 text-sm">Payback Period</span>
                    <span className="text-sm font-medium">{Math.round(product.price / (product.monthly_savings * 12))} years</span>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <Wrench size={16} className="text-primary/80" />
                  <div className="flex flex-1 justify-between">
                    <span className="text-light/80 text-sm">Installation</span>
                    <span className="text-sm font-medium">{product.installation_time || '7-10'} days</span>
                  </div>
                </div>
                {product.price > 20000 && (
                  <div className="mt-4 flex items-center gap-2">
                    <Wallet size={16} className="text-primary/80" />
                    <div className="flex flex-1 justify-between">
                      <span className="text-light/80 text-sm">Easy EMI</span>
                      <span className="text-sm font-medium">
                        ₹{Math.round((product.price - (product.subsidy_amount || 0)) / 12).toLocaleString()}/month
                      </span>
                    </div>
                  </div>
                )}
              </div>
            </div>
            
            <div className="mt-auto pt-4 flex items-center justify-between border-t border-white/5">
              <div className="flex flex-col">
                {product.product_variants && product.product_variants.length > 0 ? (
                  <>
                    <div className="flex items-baseline gap-1">
                      {/* Use default variant price if available */}
                      {product.product_variants.find(v => v.is_default)?.price ? (
                        <>
                          <p className="text-base line-through text-light/40">
                            ₹{product.product_variants.find(v => v.is_default)?.price.toLocaleString()}
                          </p>
                          <span className="text-xs font-medium text-primary">
                            {product.product_variants.find(v => v.is_default)?.subsidy_percentage || 35}% off
                          </span>
                        </>
                      ) : (
                        <>
                          <p className="text-base line-through text-light/40">₹{product.price.toLocaleString()}</p>
                          <span className="text-xs font-medium text-primary">
                            {Math.round((product.subsidy_amount / product.price) * 100)}% off
                          </span>
                        </>
                      )}
                    </div>
                    <p className="text-2xl font-medium text-light">
                      {product.product_variants.find(v => v.is_default)?.price ? (
                        <>
                          ₹{(product.product_variants.find(v => v.is_default)!.price * 
                             (1 - product.product_variants.find(v => v.is_default)!.subsidy_percentage / 100)).toLocaleString()}
                        </>
                      ) : (
                        <>₹{(product.price - (product.subsidy_amount || 0)).toLocaleString()}</>
                      )}
                    </p>
                    {product.product_variants.length > 1 && (
                      <span className="text-xs text-primary mt-1">{product.product_variants.length} variants available</span>
                    )}
                  </>
                ) : (
                  <>
                    <div className="flex items-baseline gap-1">
                      <p className="text-base line-through text-light/40">₹{product.price.toLocaleString()}</p>
                      <span className="text-xs font-medium text-primary">
                        {Math.round((product.subsidy_amount / product.price) * 100)}% off
                      </span>
                    </div>
                    <p className="text-2xl font-medium text-light">
                      ₹{(product.price - (product.subsidy_amount || 0)).toLocaleString()}
                    </p>
                  </>
                )}
              </div>
              <Button 
                onClick={(e) => {
                  e.stopPropagation(); // Prevent card click event from firing
                  handleBookClick(product);
                }}
                variant="primary"
                size="md"
                radius="full"
              >
                Book
                <ArrowRight size={16} className="ml-2 transform group-hover:translate-x-1 transition-transform duration-300" />
              </Button>
            </div>
          </div>
        </Link>
      </motion.div>
    ))
  ) : (
    <div className="col-span-3 text-center py-10">
      <p className="text-gray-400">No products found.</p>
      <button
        onClick={() => window.location.reload()}
        className="mt-4 bg-primary text-dark px-4 py-2 rounded-lg hover:bg-primary/90 transition-colors"
      >
        Refresh Page
      </button>
      {/* Product details modal removed - now using standalone ProductDetail page */}
      {/* Site Visit Modal */}
      <AnimatePresence>
        {isSiteVisitModalOpen && siteVisitProduct && (
          <SiteVisitForm
            isOpen={isSiteVisitModalOpen}
            onClose={handleCloseSiteVisit}
            productSku={siteVisitProduct.sku}
            productName={siteVisitProduct.name}
            productPower={siteVisitProduct.power}
            price={products.find(p => p.sku === siteVisitProduct.sku)?.price || 0}
            installationTime={products.find(p => p.sku === siteVisitProduct.sku)?.installation_time || '7-10'}
            imageUrl={products.find(p => p.sku === siteVisitProduct.sku)?.image_url}
          />
        )}
      </AnimatePresence>
    </div>
  );
}
